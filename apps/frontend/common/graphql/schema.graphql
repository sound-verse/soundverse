type Auth {
  """
  JWT Bearer token
  """
  token: String!
  user: AuthUser
}

type AuthUser {
  description: String
  discord: String
  email: String
  ethAddress: String
  id: String!
  instagram: String
  joinedRoomId: String
  name: String
  profileImage: String
  soundcloud: String
  spotify: String
  twitter: String
  verified: Boolean
  website: String
}

type ChatMessage {
  message: String!
  sender: User!
}

input CreateChatMessageInput {
  message: String!
  roomId: String!
}

input CreateMintSellingInput {
  mintVoucherInput: MintVoucherInput!
  nftId: String!
}

input CreateRoomInput {
  playlistItems: [PlaylistItemInput!]!
}

input CreateSellingInput {
  nftId: String!
  saleVoucherInput: SaleVoucherInput!
}

input JoinRoomInput {
  roomId: String!
}

input LeaveRoomInput {
  roomId: String!
}

input LoginInput {
  ethAddress: String!
  signature: String!
}

type MintVoucher {
  creatorOwnerSplit: Int!
  currency: String!
  isMaster: Boolean!
  maxSupply: Int!
  price: String!
  royaltyFeeLicense: Int!
  royaltyFeeMaster: Int!
  signature: String!
  supply: Int!
  tokenUri: String!
  validUntil: Float!
}

input MintVoucherInput {
  currency: String!
  isMaster: Boolean!
  price: String!
  signature: String!
  supply: Int!
  validUntil: Timestamp!
}

type Mutation {
  createChatMessage(createChatMessageInput: CreateChatMessageInput!): Room!
  createMintSelling(createMintSellingInput: CreateMintSellingInput!): Selling!
  createNft(NFTFile: Upload!, data: NftInput!, pictureFile: Upload!): Nft!
  createRoom(createRoomInput: CreateRoomInput!): Room!
  createSelling(createSellingInput: CreateSellingInput!): Selling!
  generateVerificationToken(data: VerificationTokenInput!): Int!
  joinRoom(joinRoomInput: JoinRoomInput!): Room!
  leaveRoom(leaveRoomInput: LeaveRoomInput!): Room!
  login(data: LoginInput!): Auth!
  reviveRoom: Room!
  updateUser(data: UpdateUserInput!): User!
  uploadProfilePicture(file: Upload!): User!
}

type Nft {
  chainId: Int!
  creator: User
  creatorOwnerSplit: Float!
  filePictureUrl: String!
  fileUrl: String!
  id: String!
  ipfsUrl: String!
  licenseContractAddress: String!
  licenseOwners: [NftOwner!]
  masterContractAddress: String!
  masterOwner: NftOwner!
  metadata: NftMetadata!
  royaltyFeeLicense: Float!
  royaltyFeeMaster: Float!
  sellings: NftSelling
  soundWave: [Float!]!
  supply: Float!
  tokenId: Float
  trackDuration: Float!
  transactionHash: String
}

input NftFilter {
  id: String
  ipfsUrl: String
  tokenId: Float
}

input NftInput {
  chainId: Float
  creatorOwnerSplit: Int!
  metadata: NftMetadataInput!
  royaltyFeeLicense: Int!
  royaltyFeeMaster: Int!
  soundWave: [Float!]!
  supply: Float!
  tags: [String!]!
  trackDuration: Float!
  transactionHash: String
}

type NftMetadata {
  description: String!
  name: String!
}

input NftMetadataInput {
  description: String!
  name: String!
}

type NftOwner {
  supply: Float!
  user: User!
}

type NftSearch {
  artists: [User!]
  nfts: [Nft!]
}

input NftSearchInput {
  search: String
}

type NftSelling {
  licenseSellings: [Selling!]
  masterSelling: Selling
}

enum NftType {
  LICENSE
  MASTER
}

input NftsFilter {
  hasSelling: Boolean
}

type PlaylistItem {
  currentPosition: Float
  nft: Nft
  nftType: NftType
}

input PlaylistItemInput {
  nftId: String!
  nftType: String!
}

type Query {
  me: User!
  nft(filter: NftFilter!): Nft
  nfts(filter: NftsFilter, limit: Int!, skip: Int!): [Nft!]
  room(roomFilter: RoomFilter!): Room!
  rooms: Rooms!
  search(searchInput: NftSearchInput!): NftSearch
  user(ethAddress: String!): User
  userNfts(ethAddress: String): UserNfts!
}

type Room {
  active: Boolean!
  activeUsers: [User!]
  chat: [ChatMessage!]
  creator: User
  currentTrack: PlaylistItem
  id: String!
  playlistItems: [PlaylistItem!]
}

input RoomFilter {
  creatorId: String
  id: String
  isMasterRoom: Boolean
}

type Rooms {
  rooms: [Room!]
}

type SaleVoucher {
  currency: String!
  isMaster: Boolean!
  nftContractAddress: String!
  price: String!
  signature: String!
  supply: Int!
  tokenUri: String!
  validUntil: Float!
}

input SaleVoucherInput {
  currency: String!
  isMaster: Boolean!
  nftContractAddress: String!
  price: String!
  signature: String!
  supply: Int!
  validUntil: Timestamp!
}

type Selling {
  buyers: [NftOwner!]!
  id: String!
  marketplaceContractAddress: String!
  mintVoucher: MintVoucher
  nftType: String!
  saleVoucher: SaleVoucher
  seller: User!
  sellingStatus: String!
  transactionHash: String
}

type Subscription {
  roomUpdated(roomId: String!): Room!
  roomsUpdated: [Room!]!
}

"""
`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

input UpdateUserInput {
  description: String
  discord: String
  email: String
  instagram: String
  name: String
  soundcloud: String
  spotify: String
  twitter: String
  website: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

type User {
  description: String
  discord: String
  ethAddress: String
  id: String!
  instagram: String
  name: String
  profileImage: String
  soundcloud: String
  spotify: String
  twitter: String
  verified: Boolean
  website: String
}

type UserNfts {
  createdLicenseNfts: [Nft!]
  createdMasterNfts: [Nft!]
  ownedLicenseNfts: [Nft!]
  ownedMasterNfts: [Nft!]
}

input VerificationTokenInput {
  ethAddress: String!
}
