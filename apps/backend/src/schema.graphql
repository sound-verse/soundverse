# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: String!
  name: String
  description: String
  ethAddress: String
  twitter: String
  instagram: String
  soundcloud: String
  discord: String
  spotify: String
  website: String
  profileImage: String
  followers: [User!]
  following: [User!]
  verified: Boolean
}

type SaleVoucher {
  nftContractAddress: String!
  price: String!
  tokenUri: String!
  supply: Int!
  isMaster: Boolean!
  signature: String!
  currency: String!
  validUntil: Float!
}

type MintVoucher {
  price: String!
  tokenUri: String!
  supply: Int!
  maxSupply: Int!
  isMaster: Boolean!
  signature: String!
  currency: String!
  royaltyFeeMaster: Int!
  royaltyFeeLicense: Int!
  creatorOwnerSplit: Int!
  validUntil: Float!
}

type Selling {
  id: String!
  seller: User!
  buyers: [NftOwner!]!
  saleVoucher: SaleVoucher
  mintVoucher: MintVoucher
  nftType: String!
  marketplaceContractAddress: String!
  sellingStatus: String!
  transactionHash: String
}

type NftOwner {
  user: User!
  supply: Float!
}

type NftSelling {
  masterSelling: Selling
  licenseSellings: [Selling!]
}

type NftMetadata {
  name: String!
  description: String!
}

type Nft {
  id: String!
  tokenId: Float
  supply: Float!
  masterContractAddress: String!
  licenseContractAddress: String!
  ipfsUrl: String!
  fileUrl: String!
  trackDuration: Float!
  soundWave: [Float!]!
  chainId: Int!
  filePictureUrl: String!
  transactionHash: String
  metadata: NftMetadata!
  royaltyFeeMaster: Float!
  royaltyFeeLicense: Float!
  creatorOwnerSplit: Float!
  creator: User
  licenseOwners: [NftOwner!]
  masterOwner: NftOwner!
  sellings: NftSelling
}

type PlaylistItem {
  nft: Nft
  nftType: NftType
  currentPosition: Float
}

enum NftType {
  MASTER
  LICENSE
}

type ChatMessage {
  sender: User!
  message: String!
}

type Room {
  id: String!
  currentTrack: PlaylistItem
  playlistItems: [PlaylistItem!]
  activeUsers: [User!]
  currentAnonymousUsers: Float
  active: Boolean!
  creator: User
  chat: [ChatMessage!]
  name: String!
}

type AuthUser {
  id: String!
  name: String
  description: String
  ethAddress: String
  twitter: String
  instagram: String
  soundcloud: String
  discord: String
  spotify: String
  website: String
  profileImage: String
  followers: [User!]
  following: [User!]
  verified: Boolean
  email: String
  joinedRoomId: String
}

type Auth {
  """JWT Bearer token"""
  token: String!
  user: AuthUser
}

type UserNfts {
  createdMasterNfts: [Nft!]
  createdLicenseNfts: [Nft!]
  ownedMasterNfts: [Nft!]
  ownedLicenseNfts: [Nft!]
}

type NftSearch {
  nfts: [Nft!]
  artists: [User!]
}

type Rooms {
  rooms: [Room!]
}

type Query {
  user(ethAddress: String!): User
  me: User!
  nfts(skip: Int!, limit: Int!, filter: NftsFilter): [Nft!]
  nft(filter: NftFilter!): Nft
  search(searchInput: NftSearchInput!): NftSearch
  userNfts(ethAddress: String): UserNfts!
  room(roomFilter: RoomFilter!): Room!
  rooms: Rooms!
}

input NftsFilter {
  hasSelling: Boolean
  sortOption: SortOption
}

enum SortOption {
  NAME
  OLDEST
  NEWEST
}

input NftFilter {
  tokenId: Float
  id: String
  ipfsUrl: String
}

input NftSearchInput {
  search: String
}

input RoomFilter {
  id: String
  creatorId: String
  isMasterRoom: Boolean
}

type Mutation {
  updateUser(data: UpdateUserInput!): User!
  uploadProfilePicture(file: Upload!): User!
  follow(userId: String!): User!
  unfollow(userId: String!): User!
  generateVerificationToken(data: VerificationTokenInput!): Int!
  login(data: LoginInput!): Auth!
  createNft(NFTFile: Upload!, pictureFile: Upload!, data: NftInput!): Nft!
  createMintSelling(createMintSellingInput: CreateMintSellingInput!): Selling!
  createSelling(createSellingInput: CreateSellingInput!): Selling!
  createRoom(createRoomInput: CreateRoomInput!): Room!
  reviveRoom: Room!
  joinRoom(joinRoomInput: JoinRoomInput!): Room!
  leaveRoom(leaveRoomInput: LeaveRoomInput!): Room!
  createChatMessage(createChatMessageInput: CreateChatMessageInput!): Room!
}

input UpdateUserInput {
  twitter: String
  instagram: String
  soundcloud: String
  discord: String
  spotify: String
  website: String
  description: String
  name: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input VerificationTokenInput {
  ethAddress: String!
}

input LoginInput {
  ethAddress: String!
  signature: String!
}

input NftInput {
  metadata: NftMetadataInput!
  supply: Float!
  tags: [String!]!
  royaltyFeeMaster: Int!
  royaltyFeeLicense: Int!
  creatorOwnerSplit: Int!
  transactionHash: String
  chainId: Float
  trackDuration: Float!
  trackBPM: Float!
  genre: String!
  soundWave: [Float!]!
}

input NftMetadataInput {
  name: String!
  description: String
}

input CreateMintSellingInput {
  nftId: String!
  mintVoucherInput: MintVoucherInput!
}

input MintVoucherInput {
  price: String!
  supply: Int!
  isMaster: Boolean!
  signature: String!
  currency: String!
  validUntil: Timestamp!
}

"""
`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

input CreateSellingInput {
  nftId: String!
  saleVoucherInput: SaleVoucherInput!
}

input SaleVoucherInput {
  nftContractAddress: String!
  price: String!
  supply: Int!
  isMaster: Boolean!
  signature: String!
  currency: String!
  validUntil: Timestamp!
}

input CreateRoomInput {
  playlistItems: [PlaylistItemInput!]!
  name: String!
}

input PlaylistItemInput {
  nftId: String!
  nftType: String!
}

input JoinRoomInput {
  roomId: String!
}

input LeaveRoomInput {
  roomId: String!
}

input CreateChatMessageInput {
  message: String!
  roomId: String!
}

type Subscription {
  roomsUpdated: [Room!]!
  roomUpdated(roomId: String!, userId: String): Room!
}