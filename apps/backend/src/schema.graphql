# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: String!
  name: String
  description: String
  ethAddress: String
  twitter: String
  instagram: String
  soundcloud: String
  discord: String
  spotify: String
  website: String
  profileImage: String
  verified: Boolean
}

type AuthUser {
  id: String!
  name: String
  description: String
  ethAddress: String
  twitter: String
  instagram: String
  soundcloud: String
  discord: String
  spotify: String
  website: String
  profileImage: String
  verified: Boolean
  email: String
}

type Auth {
  """JWT Bearer token"""
  token: String!
  user: AuthUser
}

type NftOwner {
  user: User!
  supply: Float!
}

type NftMetadata {
  name: String!
  description: String!
}

type Nft {
  id: String!
  tokenId: Float
  supply: Float!
  contractAddress: String!
  ipfsUrl: String!
  fileUrl: String!
  filePictureUrl: String!
  transactionHash: String
  metadata: NftMetadata!
  creator: User
  licenseOwners: [NftOwner!]
  masterOwner: NftOwner!
}

type Query {
  user(ethAddress: String!): User
  me: User!
  nfts(filter: NftsFilter, limit: Float!, skip: Float!): [Nft!]
  nft(filter: NftFilter!): Nft
}

input NftsFilter {
  creatorEthAddress: String!
}

input NftFilter {
  contractAddress: String
  tokenId: Float
  id: String
  ipfsUrl: String
}

type Mutation {
  updateUser(data: UpdateUserInput!): User!
  uploadProfilePicture(file: Upload!): User!
  generateVerificationToken(data: VerificationTokenInput!): Int!
  login(data: LoginInput!): Auth!
  createNft(data: NftInput!, pictureFile: Upload!, NFTFile: Upload!): Nft!
  verifyMintedNFT(input: VerifyNftInput!): Nft!
  unpinAll: Boolean!
}

input UpdateUserInput {
  email: String
  twitter: String
  instagram: String
  soundcloud: String
  discord: String
  spotify: String
  website: String
  description: String
  name: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input VerificationTokenInput {
  ethAddress: String!
}

input LoginInput {
  ethAddress: String!
  signature: String!
}

input NftInput {
  metadata: NftMetadataInput!
  supply: Float!
  tags: [String!]!
  transactionHash: String
  chainId: Float
}

input NftMetadataInput {
  name: String!
  description: String!
}

input VerifyNftInput {
  id: String!
  mintVoucher: MintVoucher!
}

input MintVoucher {
  tokenId: Float!
  nftContractAddress: String!
  price: Float!
  sellCount: Float!
  tokenUri: String!
  supply: Float!
  isMaster: Boolean!
  signature: String!
}
